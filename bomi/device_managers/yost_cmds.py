from __future__ import annotations
from typing import Any, NamedTuple
import struct


class Cmd(NamedTuple):
    """
    Represents a single command (3 Space Sensor User Manual Section 4.6)
    """

    cmd: int  # command value
    out_len: int  # length of response data (bytes)
    out_struct: str | None  # struct of the response data
    in_len: int  # length of request data (bytes)
    in_struct: str | None  # struct of request data
    compat: int

    def __call__(self, *args: Any) -> bytes:
        if self.in_struct:
            b = struct.pack(self.in_struct, *args)
            assert len(b) == self.in_len
            payload = bytes((self.cmd,)) + b
            return payload

        return bytes((self.cmd,))


class Cmds:
    """
    Represents a single command (3 Space Sensor User Manual Section 4.6)
    """

    checkLongCommands = Cmd(0x19, 1, ">B", 0, None, 1)
    startStreaming = Cmd(0x55, 0, None, 0, None, 1)
    stopStreaming = Cmd(0x56, 0, None, 0, None, 1)
    updateCurrentTimestamp = Cmd(0x5F, 0, None, 4, ">I", 1)
    setLEDMode = Cmd(0xC4, 0, None, 1, ">B", 1)
    getLEDMode = Cmd(0xC8, 1, ">B", 0, None, 1)
    _setWiredResponseHeaderBitfield = Cmd(0xDD, 0, None, 4, ">I", 1)
    _getWiredResponseHeaderBitfield = Cmd(0xDE, 4, ">I", 0, None, 1)
    getFirmwareVersionString = Cmd(0xDF, 12, ">12s", 0, None, 1)
    commitSettings = Cmd(0xE1, 0, None, 0, None, 1)
    softwareReset = Cmd(0xE2, 0, None, 0, None, 1)
    getHardwareVersionString = Cmd(0xE6, 32, ">32s", 0, None, 1)
    getSerialNumber = Cmd(0xED, 4, ">I", 0, None, 1)
    setLEDColor = Cmd(0xEE, 0, None, 12, ">fff", 1)
    getLEDColor = Cmd(0xEF, 12, ">fff", 0, None, 1)
    setJoystickAndMousePresentRemoved = Cmd(0xFD, 0, None, 2, ">BB", 1)
    getJoystickAndMousePresentRemoved = Cmd(0xFE, 2, ">B", 0, None, 1)
    null = Cmd(0xFF, 0, None, 0, None, 1)

    getTaredOrientationAsQuaternion = Cmd(0x0, 16, ">4f", 0, None, 1)
    getTaredOrientationAsEulerAngles = Cmd(0x1, 12, ">fff", 0, None, 1)
    getTaredOrientationAsRotationMatrix = Cmd(0x2, 36, ">9f", 0, None, 1)
    getTaredOrientationAsAxisAngle = Cmd(0x3, 16, ">4f", 0, None, 1)
    getTaredOrientationAsTwoVector = Cmd(0x4, 24, ">6f", 0, None, 1)
    getDifferenceQuaternion = Cmd(0x5, 16, ">4f", 0, None, 1)
    getUntaredOrientationAsQuaternion = Cmd(0x6, 16, ">4f", 0, None, 1)
    getUntaredOrientationAsEulerAngles = Cmd(0x7, 12, ">fff", 0, None, 1)
    getUntaredOrientationAsRotationMatrix = Cmd(0x8, 36, ">9f", 0, None, 1)
    getUntaredOrientationAsAxisAngle = Cmd(0x9, 16, ">4f", 0, None, 1)
    getUntaredOrientationAsTwoVector = Cmd(0xA, 24, ">6f", 0, None, 1)
    getTaredTwoVectorInSensorFrame = Cmd(0xB, 24, ">6f", 0, None, 1)
    getUntaredTwoVectorInSensorFrame = Cmd(0xC, 24, ">6f", 0, None, 1)
    setEulerAngleDecompositionOrder = Cmd(0x10, 0, None, 1, ">B", 1)
    setMagnetoresistiveThreshold = Cmd(0x11, 0, None, 16, ">fIff", 3)
    setAccelerometerResistanceThreshold = Cmd(0x12, 0, None, 8, ">fI", 3)
    offsetWithCurrentOrientation = Cmd(0x13, 0, None, 0, None, 3)
    resetBaseOffset = Cmd(0x14, 0, None, 0, None, 3)
    offsetWithQuaternion = Cmd(0x15, 0, None, 16, ">4f", 3)
    setBaseOffsetWithCurrentOrientation = Cmd(0x16, 0, None, 0, None, 3)
    getAllNormalizedComponentSensorData = Cmd(0x20, 36, ">9f", 0, None, 1)
    getNormalizedGyroRate = Cmd(0x21, 12, ">fff", 0, None, 1)
    getNormalizedAccelerometerVector = Cmd(0x22, 12, ">fff", 0, None, 1)
    getNormalizedCompassVector = Cmd(0x23, 12, ">fff", 0, None, 1)
    getAllCorrectedComponentSensorData = Cmd(0x25, 36, ">9f", 0, None, 1)
    getCorrectedGyroRate = Cmd(0x26, 12, ">fff", 0, None, 1)
    getCorrectedAccelerometerVector = Cmd(0x27, 12, ">fff", 0, None, 1)
    getCorrectedCompassVector = Cmd(0x28, 12, ">fff", 0, None, 1)
    getCorrectedLinearAccelerationInGlobalSpace = Cmd(0x29, 12, ">fff", 0, None, 1)
    getTemperatureC = Cmd(0x2B, 4, ">f", 0, None, 1)
    getTemperatureF = Cmd(0x2C, 4, ">f", 0, None, 1)
    getConfidenceFactor = Cmd(0x2D, 4, ">f", 0, None, 1)
    getAllRawComponentSensorData = Cmd(0x40, 36, ">9f", 0, None, 1)
    getRawGyroscopeRate = Cmd(0x41, 12, ">fff", 0, None, 1)
    getRawAccelerometerData = Cmd(0x42, 12, ">fff", 0, None, 1)
    getRawCompassData = Cmd(0x43, 12, ">fff", 0, None, 1)
    _setStreamingSlots = Cmd(0x50, 0, None, 8, ">8B", 1)
    _getStreamingSlots = Cmd(0x51, 8, ">8B", 0, None, 1)
    _setStreamingTiming = Cmd(0x52, 0, None, 12, ">III", 1)
    _getStreamingTiming = Cmd(0x53, 12, ">III", 0, None, 1)
    _getStreamingBatch = Cmd(0x54, 0, None, 0, None, 1)
    tareWithCurrentOrientation = Cmd(0x60, 0, None, 0, None, 1)
    tareWithQuaternion = Cmd(0x61, 0, None, 16, ">4f", 1)
    tareWithRotationMatrix = Cmd(0x62, 0, None, 36, ">9f", 1)
    setStaticAccelerometerTrustValue = Cmd(0x63, 0, None, 4, ">f", 2)
    setConfidenceAccelerometerTrustValues = Cmd(0x64, 0, None, 8, ">ff", 2)
    setStaticCompassTrustValue = Cmd(0x65, 0, None, 4, ">f", 2)
    setConfidenceCompassTrustValues = Cmd(0x66, 0, None, 8, ">ff", 2)
    setDesiredUpdateRate = Cmd(0x67, 0, None, 4, ">I", 1)
    setReferenceVectorMode = Cmd(0x69, 0, None, 1, ">B", 1)
    setOversampleRate = Cmd(0x6A, 0, None, 1, ">B", 1)
    setGyroscopeEnabled = Cmd(0x6B, 0, None, 1, ">B", 1)
    setAccelerometerEnabled = Cmd(0x6C, 0, None, 1, ">B", 1)
    setCompassEnabled = Cmd(0x6D, 0, None, 1, ">B", 1)
    setAxisDirections = Cmd(0x74, 0, None, 1, ">B", 1)
    setRunningAveragePercent = Cmd(0x75, 0, None, 4, ">f", 1)
    setCompassReferenceVector = Cmd(0x76, 0, None, 12, ">fff", 1)
    setAccelerometerReferenceVector = Cmd(0x77, 0, None, 12, ">fff", 1)
    resetKalmanFilter = Cmd(0x78, 0, None, 0, None, 1)
    setAccelerometerRange = Cmd(0x79, 0, None, 1, ">B", 1)
    setFilterMode = Cmd(0x7B, 0, None, 1, ">B", 1)
    setRunningAverageMode = Cmd(0x7C, 0, None, 1, ">B", 1)
    setGyroscopeRange = Cmd(0x7D, 0, None, 1, ">B", 1)
    setCompassRange = Cmd(0x7E, 0, None, 1, ">B", 1)
    getTareAsQuaternion = Cmd(0x80, 16, ">4f", 0, None, 1)
    getTareAsRotationMatrix = Cmd(0x81, 36, ">9f", 0, None, 1)
    getAccelerometerTrustValues = Cmd(0x82, 8, ">ff", 0, None, 2)
    getCompassTrustValues = Cmd(0x83, 8, ">ff", 0, None, 2)
    getCurrentUpdateRate = Cmd(0x84, 4, ">I", 0, None, 1)
    getCompassReferenceVector = Cmd(0x85, 12, ">fff", 0, None, 1)
    getAccelerometerReferenceVector = Cmd(0x86, 12, ">fff", 0, None, 1)
    getGyroscopeEnabledState = Cmd(0x8C, 1, ">B", 0, None, 1)
    getAccelerometerEnabledState = Cmd(0x8D, 1, ">B", 0, None, 1)
    getCompassEnabledState = Cmd(0x8E, 1, ">B", 0, None, 1)
    getAxisDirections = Cmd(0x8F, 1, ">B", 0, None, 1)
    getOversampleRate = Cmd(0x90, 1, ">B", 0, None, 1)
    getRunningAveragePercent = Cmd(0x91, 4, ">f", 0, None, 1)
    getDesiredUpdateRate = Cmd(0x92, 4, ">I", 0, None, 1)
    getAccelerometerRange = Cmd(0x94, 1, ">B", 0, None, 1)
    getFilterMode = Cmd(0x98, 1, ">B", 0, None, 1)
    getRunningAverageMode = Cmd(0x99, 1, ">B", 0, None, 1)
    getGyroscopeRange = Cmd(0x9A, 1, ">B", 0, None, 1)
    getCompassRange = Cmd(0x9B, 1, ">B", 0, None, 1)
    getEulerAngleDecompositionOrder = Cmd(0x9C, 1, ">B", 0, None, 1)
    getMagnetoresistiveThreshold = Cmd(0x9D, 16, ">fIff", 0, None, 3)
    getAccelerometerResistanceThreshold = Cmd(0x9E, 8, ">fI", 0, None, 3)
    getOffsetOrientationAsQuaternion = Cmd(0x9F, 16, ">4f", 0, None, 3)
    setCompassCalibrationCoefficients = Cmd(0xA0, 0, None, 48, ">12f", 1)
    setAccelerometerCalibrationCoefficients = Cmd(0xA1, 0, None, 48, ">12f", 1)
    getCompassCalibrationCoefficients = Cmd(0xA2, 48, ">12f", 0, None, 1)
    getAccelerometerCalibrationCoefficients = Cmd(0xA3, 48, ">12f", 0, None, 1)
    getGyroscopeCalibrationCoefficients = Cmd(0xA4, 48, ">12f", 0, None, 1)
    beginGyroscopeAutoCalibration = Cmd(0xA5, 0, None, 0, None, 1)
    setGyroscopeCalibrationCoefficients = Cmd(0xA6, 0, None, 48, ">12f", 1)
    setCalibrationMode = Cmd(0xA9, 0, None, 1, ">B", 1)
    getCalibrationMode = Cmd(0xAA, 1, ">B", 0, None, 1)
    setOrthoCalibrationDataPointFromCurrentOrientation = Cmd(0xAB, 0, None, 0, None, 1)
    setOrthoCalibrationDataPointFromVector = Cmd(0xAC, 0, None, 14, ">BBfff", 1)
    getOrthoCalibrationDataPoint = Cmd(0xAD, 12, ">fff", 2, ">BB", 1)
    performOrthoCalibration = Cmd(0xAE, 0, None, 0, None, 1)
    clearOrthoCalibrationData = Cmd(0xAF, 0, None, 0, None, 1)
    setSleepMode = Cmd(0xE3, 0, None, 1, ">B", 1)
    getSleepMode = Cmd(0xE4, 1, ">B", 0, None, 1)
    setJoystickEnabled = Cmd(0xF0, 0, None, 1, ">B", 1)
    setMouseEnabled = Cmd(0xF1, 0, None, 1, ">B", 1)
    getJoystickEnabled = Cmd(0xF2, 1, ">B", 0, None, 1)
    getMouseEnabled = Cmd(0xF3, 1, ">B", 0, None, 1)
    setControlMode = Cmd(0xF4, 0, None, 3, ">BBB", 1)
    setControlData = Cmd(0xF5, 0, None, 7, ">BBBf", 1)
    getControlMode = Cmd(0xF6, 1, ">B", 2, ">BB", 1)
    getControlData = Cmd(0xF7, 4, ">f", 3, ">BBB", 1)
    setMouseAbsoluteRelativeMode = Cmd(0xFB, 0, None, 1, ">B", 1)
    getMouseAbsoluteRelativeMode = Cmd(0xFC, 1, ">B", 0, None, 1)


class WLCmds:
    _getWirelessPanID = Cmd(0xC0, 2, ">H", 0, None, 1)
    _setWirelessPanID = Cmd(0xC1, 0, None, 2, ">H", 1)
    _getWirelessChannel = Cmd(0xC2, 1, ">B", 0, None, 1)
    _setWirelessChannel = Cmd(0xC3, 0, None, 1, ">B", 1)
    commitWirelessSettings = Cmd(0xC5, 0, None, 0, None, 1)
    getWirelessAddress = Cmd(0xC6, 2, ">H", 0, None, 1)
    getBatteryVoltage = Cmd(0xC9, 4, ">f", 0, None, 1)
    getBatteryPercentRemaining = Cmd(0xCA, 1, ">B", 0, None, 1)
    getBatteryStatus = Cmd(0xCB, 1, ">B", 0, None, 1)
    getButtonState = Cmd(0xFA, 1, ">B", 0, None, 1)
